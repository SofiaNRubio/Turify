---
import AdminPanel from "../../components/AdminPanel.astro";
import { AdminMenu } from "../../components/AdminMenu";
import { apiFetch } from "../../utils/api";
import "../../style/atractivos-nuevo.css";
import "../../style/form-editar.css";

// Obtener el ID de la empresa a editar
const id = Astro.url.searchParams.get("id");

if (!id) {
    return Astro.redirect("/admin/gestion");
}

// Obtener los datos de la empresa
let empresa;
let categorias = [];
let error = "";
let mensaje = "";

try {
    // Obtener categorías disponibles
    const categoriasResponse = await apiFetch("/categorias");
    if (categoriasResponse.ok) {
        categorias = await categoriasResponse.json();
    }

    const empresaResponse = await apiFetch(`/empresas/${id}`);

    if (!empresaResponse.ok) {
        throw new Error("Empresa no encontrada");
    }

    empresa = await empresaResponse.json();

    // Procesar el formulario de actualización
    if (Astro.request.method === "POST") {
        try {
            const formData = await Astro.request.formData();

            const empresaActualizada = {
                nombre: formData.get("nombre"),
                descripcion: formData.get("descripcion"),
                email: formData.get("email"),
                telefono: formData.get("telefono"),
                sitio_web: formData.get("sitio_web"),
                direccion: formData.get("direccion"),
                distrito: formData.get("distrito"),
                latitud: parseFloat(formData.get("latitud")?.toString() || "0"),
                longitud: parseFloat(
                    formData.get("longitud")?.toString() || "0"
                ),
                img_url: formData.get("img_url"),
                categoria_id: formData.get("categoria_id"),
            };

            const updateResponse = await apiFetch(`/empresas/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(empresaActualizada),
            });

            if (!updateResponse.ok) {
                throw new Error("Error al actualizar la empresa");
            }

            mensaje = "Empresa actualizada correctamente";

            // Actualizar los datos de la empresa para mostrar la info actualizada
            const nuevaEmpresaResponse = await apiFetch(`/empresas/${id}`);
            empresa = await nuevaEmpresaResponse.json();
            // Redirigir a la página de administración de atractivos después de un breve retraso
            return Astro.redirect("/admin/gestion");
        } catch (err: any) {
            error = err.message || "Error al actualizar";
        }
    }
} catch (err: any) {
    error = err.message;
    empresa = null;
}

// Si no se pudo cargar la empresa, mostrar un mensaje de error
if (!empresa) {
    error = "No se pudo cargar la información de la empresa";
}
---

<AdminPanel menu={AdminMenu}>
    <div class="admin-content">
        <h1>Editar empresa</h1>

        {mensaje && <div class="mensaje mensaje-exito">{mensaje}</div>}
        {error && <div class="mensaje mensaje-error">{error}</div>}

        {
            empresa && (
                <form method="POST" class="form-empresa">
                    <div class="form-section">
                        <h3>Información general</h3>
                        <label>
                            Nombre:
                            <input
                                type="text"
                                name="nombre"
                                value={empresa.nombre}
                                required
                            />{" "}
                        </label>
                        <label>
                            Descripción:
                            <textarea name="descripcion" rows="3">
                                {empresa.descripcion || ""}
                            </textarea>
                        </label>
                        <label>
                            Categoría:
                            <select name="categoria_id">
                                <option value="">Seleccionar categoría</option>
                                {categorias.map((categoria: any) => (
                                    <option
                                        value={categoria.id}
                                        selected={
                                            empresa.categoria_id ===
                                            categoria.id
                                        }>
                                        {categoria.nombre}
                                    </option>
                                ))}
                            </select>
                        </label>
                        <label>
                            Imagen:
                            <div class="imagen-upload-container">
                                <input
                                    type="file"
                                    id="imagen-file"
                                    accept="image/*"
                                    style="display: none;"
                                />
                                <input
                                    type="url"
                                    name="img_url"
                                    id="img-url-input"
                                    value={empresa.img_url || ""}
                                    placeholder="URL de la imagen"
                                    readonly
                                />
                                <button
                                    type="button"
                                    id="btn-subir-imagen"
                                    class="btn-upload">
                                    Subir Imagen
                                </button>
                                <div id="upload-status" class="upload-status" />
                            </div>
                            <small>
                                Haz clic en "Subir Imagen" para seleccionar y
                                subir una imagen a ImgBB automáticamente
                            </small>
                        </label>
                    </div>

                    <div class="form-section">
                        <h3>Contacto</h3>
                        <label>
                            Email:
                            <input
                                type="email"
                                name="email"
                                value={empresa.email}
                            />
                        </label>
                        <label>
                            {" "}
                            Teléfono:
                            <input
                                type="text"
                                name="telefono"
                                value={empresa.telefono || ""}
                            />
                        </label>
                        <label>
                            Sitio web:
                            <input
                                type="url"
                                name="sitio_web"
                                value={empresa.sitio_web || ""}
                            />
                        </label>
                    </div>

                    <div class="form-section">
                        <h3>Ubicación</h3>
                        <div class="form-row">
                            <label>
                                {" "}
                                Latitud:
                                <input
                                    type="number"
                                    step="0.000001"
                                    name="latitud"
                                    value={empresa.latitud || 0}
                                />
                            </label>
                            <label>
                                Longitud:
                                <input
                                    type="number"
                                    step="0.000001"
                                    name="longitud"
                                    value={empresa.longitud || 0}
                                />
                            </label>
                        </div>
                        <label>
                            Dirección:
                            <input
                                type="text"
                                name="direccion"
                                value={empresa.direccion || ""}
                            />
                        </label>
                    </div>

                    <div class="form-section">
                        <h3>Distrito</h3>
                        <label>
                            Distrito:
                            <input
                                type="text"
                                name="distrito"
                                value={empresa.distrito || ""}
                            />
                        </label>
                    </div>

                    <div class="form-empresa-buttons">
                        <button type="submit" class="btn-nuevo">
                            Guardar cambios
                        </button>
                        <a href="/admin/gestion" class="btn-cancelar">
                            Cancelar
                        </a>
                    </div>
                </form>
            )
        }
    </div>
</AdminPanel>

<script>
    // Validación básica del formulario
    document.addEventListener("DOMContentLoaded", () => {
        const form = document.querySelector(".form-empresa");

        if (form) {
            form.addEventListener("submit", (e) => {
                const nombreInput = document.querySelector(
                    'input[name="nombre"]'
                ) as HTMLInputElement;

                if (!nombreInput.value.trim()) {
                    e.preventDefault();
                    alert("Por favor, ingresa un nombre para la empresa.");
                    nombreInput.focus();
                }
            });
        }

        // Botón cancelar - confirmar antes de salir si hay cambios
        const btnCancelar = document.querySelector(".btn-cancelar");
        let formModificado = false;

        // Detectar cambios en el formulario
        const inputs = document.querySelectorAll("input, textarea, select");
        inputs.forEach((input) => {
            input.addEventListener("change", () => {
                formModificado = true;
            });
        });

        if (btnCancelar) {
            btnCancelar.addEventListener("click", (e) => {
                if (formModificado) {
                    const confirmar = confirm(
                        "¿Estás seguro de que deseas cancelar? Los cambios no guardados se perderán."
                    );
                    if (!confirmar) {
                        e.preventDefault();
                    }
                }
            });
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Variables para controlar cambios en el formulario
        let formModificado = false;

        // Prevenir clics múltiples en botones y envíos de formularios
        const preventMultipleSubmits = () => {
            // Prevenir clics múltiples en botones tipo submit
            const submitButtons = document.querySelectorAll(
                'button[type="submit"]'
            );
            submitButtons.forEach((button) => {
                button.addEventListener("click", function (e) {
                    if (this.classList.contains("procesando")) {
                        e.preventDefault();
                        return false;
                    }

                    this.classList.add("procesando");
                    const textoOriginal = this.textContent || "";
                    this.dataset.textoOriginal = textoOriginal;
                    this.textContent = "Procesando...";
                    this.style.opacity = "0.7";

                    // No deshabilitar pointer-events completamente para permitir el envío del formulario
                    // this.style.pointerEvents = 'none';

                    // Timeout de seguridad
                    setTimeout(() => {
                        if (this.classList.contains("procesando")) {
                            this.classList.remove("procesando");
                            this.textContent = textoOriginal;
                            this.style.opacity = "";
                            // this.style.pointerEvents = '';
                        }
                    }, 10000); // Aumentar a 10 segundos
                });
            });

            // Prevenir envíos múltiples de formularios
            const forms = document.querySelectorAll("form");
            forms.forEach((form) => {
                form.addEventListener("submit", function (e) {
                    if (this.classList.contains("enviando")) {
                        e.preventDefault();
                        return false;
                    }

                    this.classList.add("enviando");

                    // No vamos a detener el envío del formulario, solo evitar envíos múltiples
                    // El formulario se procesará normalmente

                    // Timeout de seguridad para resetear el estado en caso de error
                    setTimeout(() => {
                        if (this.classList.contains("enviando")) {
                            this.classList.remove("enviando");
                        }
                    }, 10000); // Aumentar el timeout a 10 segundos para dar más tiempo al servidor
                });
            });
        };

        // Ejecutar la protección contra clics múltiples
        preventMultipleSubmits();
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Funcionalidad para subir imágenes a ImgBB
        const API_KEY = "a0d050547832d68853fc714d2b5b41ba"; // Clave API de ImgBB (debe ser reemplazada por una real)
        const btnSubirImagen = document.getElementById("btn-subir-imagen");
        const imagenFile = document.getElementById("imagen-file");
        const imgUrlInput = document.getElementById("img-url-input");
        const uploadStatus = document.getElementById("upload-status");

        if (btnSubirImagen && imagenFile && imgUrlInput && uploadStatus) {
            btnSubirImagen.addEventListener("click", () => {
                imagenFile.click();
            });

            imagenFile.addEventListener("change", async (e) => {
                const file = e.target.files[0];
                if (!file) return;

                // Validar tipo de archivo
                if (!file.type.startsWith("image/")) {
                    uploadStatus.innerHTML =
                        '<span class="error">Por favor selecciona una imagen válida</span>';
                    return;
                }

                // Validar tamaño (máximo 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    uploadStatus.innerHTML =
                        '<span class="error">La imagen es muy grande. Máximo 5MB</span>';
                    return;
                }

                try {
                    uploadStatus.innerHTML =
                        '<span class="loading">Subiendo imagen...</span>';
                    btnSubirImagen.disabled = true;
                    btnSubirImagen.textContent = "Subiendo...";

                    // Crear FormData para enviar a ImgBB
                    const formData = new FormData();
                    formData.append("image", file);

                    // Subir a ImgBB
                    const response = await fetch(
                        `https://api.imgbb.com/1/upload?key=${API_KEY}`,
                        {
                            method: "POST",
                            body: formData,
                        }
                    );

                    const result = await response.json();

                    if (result.success) {
                        // Extraer la URL de la imagen
                        const imageUrl = result.data.url;
                        imgUrlInput.value = imageUrl;
                        uploadStatus.innerHTML =
                            '<span class="success">✓ Imagen subida exitosamente</span>';

                        // Marcar el formulario como modificado
                        const changeEvent = new Event("change", {
                            bubbles: true,
                        });
                        imgUrlInput.dispatchEvent(changeEvent);
                    } else {
                        throw new Error(
                            result.error?.message || "Error al subir la imagen"
                        );
                    }
                } catch (error) {
                    console.error("Error al subir imagen:", error);
                    uploadStatus.innerHTML =
                        '<span class="error">Error al subir la imagen. Inténtalo de nuevo.</span>';
                } finally {
                    btnSubirImagen.disabled = false;
                    btnSubirImagen.textContent = "Subir Imagen";
                    // Limpiar el input file para permitir subir la misma imagen nuevamente si es necesario
                    imagenFile.value = "";
                }
            });
        }
    });
</script>

<style>
    .imagen-upload-container {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    #img-url-input {
        flex: 1;
        min-width: 200px;
    }

    .btn-upload {
        background: #28a745;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.3s;
    }

    .btn-upload:hover:not(:disabled) {
        background: #218838;
    }

    .btn-upload:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }

    .upload-status {
        width: 100%;
        margin-top: 5px;
        font-size: 14px;
    }

    .upload-status .success {
        color: #28a745;
    }

    .upload-status .error {
        color: #dc3545;
    }

    .upload-status .loading {
        color: #007bff;
    }
</style>
