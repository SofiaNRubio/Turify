---
import AdminPanel from "../../components/AdminPanel.astro";
import TableAdmin from "../../components/TableAdmin.astro";
import { AdminMenu } from "../../components/AdminMenu";
import { apiFetch } from "../../utils/api";
import "../../style/categorias.css";
import "../../style/modal.css";

// Obtener par√°metros de filtro de la URL
const { searchParams } = Astro.url;
const nombreFiltro = searchParams.get('nombre') || '';

// Construir la URL de la API con los filtros
let apiUrl = '/categorias';
const filtros = [];
if (nombreFiltro) filtros.push(`nombre=${encodeURIComponent(nombreFiltro)}`);
if (filtros.length > 0) {
  apiUrl += `?${filtros.join('&')}`;
}

// Obtener categor√≠as desde la API
const response = await apiFetch(apiUrl);
let categorias = [];

if (response.ok) {
  categorias = await response.json();
} else {
  console.error('Error al cargar categor√≠as:', response.statusText);
  categorias = [];
}

// Definir columnas para la tabla
const columnas = [
  { key: 'id', label: 'ID', editable: false },
  { key: 'nombre', label: 'Nombre', editable: true, required: true }
];
---

<AdminPanel menu={AdminMenu}>
  <div class="admin-content">
    <div class="header">
      <h1>Categor√≠as</h1>
      <a href="/admin/categorias-nueva" class="btn btn-nuevo">
        <span class="btn-icon">+</span>
        <span class="btn-text">Nueva Categor√≠a</span>
      </a>
    </div>
    
    <!-- Filtros -->
    <div class="filtros-container">
      <form id="filtros-form" method="get" class="filtros">
        <div class="filtro filtro-nombre">
          <label for="nombre">Nombre de Categor√≠a:</label>
          <input type="text" id="nombre" name="nombre" value={nombreFiltro} placeholder="Buscar...">
        </div>
        
        <div class="filtros-botones">
          <button type="submit" class="btn-filtrar">Filtrar</button>
          <a href="/admin/categorias" class="btn-limpiar">Limpiar</a>
        </div>
      </form>
    </div>
    
    <!-- Tabla de categor√≠as -->
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Nombre</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>        {categorias.length > 0 ? (
          categorias.map((cat: any) => (
            <tr>
              <td>{cat.id}</td>
              <td>{cat.nombre}</td>              <td class="acciones">
                <button class="btn btn-editar" data-id={cat.id} data-nombre={cat.nombre} title="Editar esta categor√≠a">
                  <span class="btn-icon">‚úèÔ∏è</span>
                  <span class="btn-text">Editar</span>
                </button>
                <button class="btn btn-eliminar" data-id={cat.id} data-nombre={cat.nombre} title="Eliminar esta categor√≠a">
                  <span class="btn-icon">üóëÔ∏è</span>
                  <span class="btn-text">Eliminar</span>
                </button>
              </td>
            </tr>
          ))
        ) : (
          <tr>
            <td colspan="3" class="sin-resultados">
              No se encontraron categor√≠as
            </td>
          </tr>
        )}
      </tbody>
    </table>
  </div>
  <!-- Modal para crear nueva categor√≠a -->
  <div id="modal-nueva-categoria" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3>Nueva Categor√≠a</h3>
      </div>
      <div class="modal-body">
        <form id="form-nueva-categoria" class="modal-form">
          <div class="modal-form-group">
            <label for="nueva-nombre">Nombre:</label>
            <input type="text" id="nueva-nombre" name="nombre" required class="form-control">
          </div>
          
          <div class="modal-actions">
            <button type="submit" class="modal-btn modal-btn-primary">Guardar</button>
            <button type="button" class="modal-btn modal-btn-secondary" id="btn-cancelar-nueva">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal de confirmaci√≥n de eliminaci√≥n -->
  <div id="modal-confirmar-eliminar" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3>Confirmar eliminaci√≥n</h3>
      </div>
      <div class="modal-body">
        <p id="texto-confirmar-eliminar">¬øEst√°s seguro de que deseas eliminar esta categor√≠a?</p>
          <div class="modal-actions">
          <button class="modal-btn modal-btn-danger" id="btn-confirmar-eliminar">Eliminar</button>
          <button class="modal-btn modal-btn-secondary" id="btn-cancelar-confirmar">Cancelar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de notificaci√≥n -->
  <div id="modal-notificacion" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3 id="titulo-notificacion">Notificaci√≥n</h3>
      </div>
      <div class="modal-body">
        <p id="texto-notificacion"></p>
        
        <div class="modal-actions">
          <button class="modal-btn modal-btn-primary" id="btn-aceptar-notificacion">Aceptar</button>
        </div>
      </div>
    </div>
  </div>  <!-- Modal de edici√≥n directa -->
  <div id="modal-editar-categoria" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3>Editar categor√≠a</h3>
      </div>
      <div class="modal-body">
        <form id="form-editar-categoria" class="modal-form">
          <input type="hidden" id="categoria-id-editar" value="">
          
          <div class="modal-form-group">
            <label for="nombre-editar">Nuevo nombre:</label>
            <input type="text" id="nombre-editar" name="nombre" class="form-control" required>
          </div>
          
          <div class="modal-actions">
            <button type="submit" class="modal-btn modal-btn-primary">Guardar cambios</button>
            <button type="button" class="modal-btn modal-btn-secondary" id="btn-cancelar-editar">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminPanel>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Funci√≥n apiFetch para uso en el cliente
    const apiFetch = async (endpoint: string, options: RequestInit = {}) => {
      const API_URL = window.location.origin.includes('localhost') 
        ? 'http://localhost:3000' 
        : 'https://api.turify.com';
      const url = endpoint.startsWith('http') ? endpoint : `${API_URL}/api${endpoint}`;
      return fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });
    };
    // Modal para nueva categor√≠a
    const btnNuevo = document.querySelector('.btn-nuevo');    const modalNueva = document.getElementById('modal-nueva-categoria');
    const formNueva = document.getElementById('form-nueva-categoria');
    const btnCancelarNueva = document.getElementById('btn-cancelar-nueva');
      // Elementos del modal de eliminaci√≥n
    const btnEliminar = document.querySelectorAll('.btn-eliminar');
    const modalConfirmarEliminar = document.getElementById('modal-confirmar-eliminar');
    const btnCancelarConfirmar = document.getElementById('btn-cancelar-confirmar');
    const btnConfirmarEliminar = document.getElementById('btn-confirmar-eliminar');
    const modalNotificacion = document.getElementById('modal-notificacion');
    const btnAceptarNotificacion = document.getElementById('btn-aceptar-notificacion');    // Elementos del modal de edici√≥n
    const btnEditar = document.querySelectorAll('.btn-editar');
    const modalEditarCategoria = document.getElementById('modal-editar-categoria');
    const formEditarCategoria = document.getElementById('form-editar-categoria');
    const btnCancelarEditar = document.getElementById('btn-cancelar-editar');
    const inputNombreEditar = document.getElementById('nombre-editar') as HTMLInputElement;
      // Variables para almacenar datos del elemento seleccionado
    let currentId: string | null = null;
    let currentNombre: string | null = null;
    
    // Funci√≥n para mostrar notificaci√≥n
    function mostrarNotificacion(titulo: string, mensaje: string, esExito: boolean = true, recargar: boolean = true) {
      const tituloNotificacion = document.getElementById('titulo-notificacion');
      const textoNotificacion = document.getElementById('texto-notificacion');
      
      if (tituloNotificacion) {
        tituloNotificacion.textContent = titulo;
      }
      
      if (textoNotificacion) {
        textoNotificacion.textContent = mensaje;
      }
      
      modalNotificacion?.classList.remove('hidden');
      
      btnAceptarNotificacion?.addEventListener('click', () => {
        modalNotificacion?.classList.add('hidden');
        if (recargar) {
          window.location.reload();
        }
      }, { once: true });
    }
    
    // Funci√≥n para cerrar modales
    function cerrarModal(modal: HTMLElement | null) {
      if (modal) {
        modal.classList.add('hidden');
      }
    }
    
    // Event listeners para el modal de nueva categor√≠a
    btnNuevo?.addEventListener('click', (e) => {
      e.preventDefault();
      modalNueva?.classList.remove('hidden');
    });
    
    btnCancelarNueva?.addEventListener('click', () => {
      cerrarModal(modalNueva);
    });
    
    formNueva?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(formNueva as HTMLFormElement);
      const nombre = formData.get('nombre') as string;
      
      try {
        const response = await apiFetch('/categorias', {
          method: 'POST',
          body: JSON.stringify({ nombre })
        });
        
        if (response.ok) {
          mostrarNotificacion('√âxito', 'Categor√≠a creada correctamente');
          cerrarModal(modalNueva);
          (formNueva as HTMLFormElement).reset();
        } else {
          mostrarNotificacion('Error', 'Error al crear la categor√≠a', false, false);
        }
      } catch (error) {
        console.error('Error:', error);
        mostrarNotificacion('Error', 'Error de conexi√≥n', false, false);
      }
    });
    
    // Event listeners para el modal de eliminaci√≥n
    btnEliminar.forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        const nombre = btn.getAttribute('data-nombre');
        
        currentId = id;
        currentNombre = nombre;
        
        const textoConfirmar = document.getElementById('texto-confirmar-eliminar');
        if (textoConfirmar) {
          textoConfirmar.textContent = `¬øEst√°s seguro de que deseas eliminar la categor√≠a "${nombre}"?`;
        }
        
        modalConfirmarEliminar?.classList.remove('hidden');
      });
    });
    
    btnCancelarConfirmar?.addEventListener('click', () => {
      cerrarModal(modalConfirmarEliminar);
    });
    
    btnConfirmarEliminar?.addEventListener('click', async () => {
      if (!currentId) return;
      
      try {
        const response = await apiFetch(`/categorias/${currentId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          mostrarNotificacion('√âxito', 'Categor√≠a eliminada correctamente');
          cerrarModal(modalConfirmarEliminar);
        } else {
          mostrarNotificacion('Error', 'Error al eliminar la categor√≠a', false, false);
        }
      } catch (error) {
        console.error('Error:', error);
        mostrarNotificacion('Error', 'Error de conexi√≥n', false, false);
      }
    });
    
    // Event listeners para el modal de edici√≥n
    btnEditar.forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        const nombre = btn.getAttribute('data-nombre');
        
        currentId = id;
        currentNombre = nombre;
        
        if (inputNombreEditar) {
          inputNombreEditar.value = nombre || '';
        }
        
        modalEditarCategoria?.classList.remove('hidden');
      });
    });
    
    btnCancelarEditar?.addEventListener('click', () => {
      cerrarModal(modalEditarCategoria);
    });
    
    formEditarCategoria?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!currentId) return;
      
      const formData = new FormData(formEditarCategoria as HTMLFormElement);
      const nombre = formData.get('nombre') as string;
      
      try {
        const response = await apiFetch(`/categorias/${currentId}`, {
          method: 'PUT',
          body: JSON.stringify({ nombre })
        });
        
        if (response.ok) {
          mostrarNotificacion('√âxito', 'Categor√≠a actualizada correctamente');
          cerrarModal(modalEditarCategoria);
        } else {
          mostrarNotificacion('Error', 'Error al actualizar la categor√≠a', false, false);
        }
      } catch (error) {
        console.error('Error:', error);
        mostrarNotificacion('Error', 'Error de conexi√≥n', false, false);
      }
    });
  });
</script>
