---
import { apiFetch } from "../utils/api";
import "../style/llegar.css";

// Definir tipos TypeScript
interface Empresa {
    id: string;
    nombre: string;
    descripcion: string | null;
    email: string | null;
    telefono: string | null;
    sitio_web: string | null;
    direccion: string;
    latitud: number | null;
    longitud: number | null;
    img_url: string | null;
    categoria_id: string | null;
    created_at: string;
}

interface Categoria {
    id: string;
    nombre: string;
}

interface CategoriaConImagen {
    id: string;
    nombre: string;
    imagen: string | null;
    empresasCount: number;
}

// Función para obtener las categorías desde el backend
async function obtenerCategorias(): Promise<Categoria[]> {
    try {
        const response = await apiFetch("/categorias");
        if (!response.ok) {
            throw new Error("Error al obtener categorías");
        }
        return await response.json();
    } catch (error) {
        console.error("Error al obtener categorías:", error);
        return [];
    }
}

// Función para obtener las empresas desde el backend
async function obtenerEmpresas(): Promise<Empresa[]> {
    try {
        const response = await apiFetch("/empresas");
        if (!response.ok) {
            throw new Error("Error al obtener empresas");
        }
        return await response.json();
    } catch (error) {
        console.error("Error al obtener empresas:", error);
        return [];
    }
}

// Obtener datos
const categorias = await obtenerCategorias();
const empresas = await obtenerEmpresas();

// Filtrar categorías de llegada (incluir solo estas)
const categoriasLlegada = [
    "aerolineas",
    "terminal_omnibus",
    "aeropuerto",
    "avion",
    "vuelo",
    "llegar",
    "aerolinea",
    "omnibus",
    "bus",
    "terminal",
];

const categoriasFiltradas = categorias.filter((categoria) =>
    categoriasLlegada.some((llegada) =>
        categoria.nombre.toLowerCase().includes(llegada)
    )
);

// Crear array de categorías con sus imágenes y conteo de empresas
const categoriasConImagen: CategoriaConImagen[] = categoriasFiltradas
    .map((categoria) => {
        // Buscar empresas de esta categoría
        const empresasDeCategoria = empresas.filter(
            (empresa) => empresa.categoria_id === categoria.id
        );

        // Buscar la primera empresa con imagen de esta categoría
        const empresaConImagen = empresasDeCategoria.find((empresa) => {
            const tieneImagen =
                empresa.img_url &&
                empresa.img_url.trim() !== "" &&
                empresa.img_url !== "null" &&
                empresa.img_url !== "undefined";

            return tieneImagen;
        });

        // Usar imagen de empresa o null si no hay
        const imagen = empresaConImagen?.img_url || null;

        return {
            id: categoria.id,
            nombre: categoria.nombre,
            imagen: imagen,
            empresasCount: empresasDeCategoria.length,
        };
    })
    .filter((categoria) => categoria.empresasCount > 0); // Solo mostrar categorías que tienen empresas
---

<link rel="stylesheet" href="/src/style/llegar.css" />

<section class="servicios-llegada">
    <div class="header-llegada">
        <h2>Servicios de Llegada</h2>
    </div>
    <div class="empresas-grid">
        {
            categoriasConImagen.map((categoria: CategoriaConImagen) => (
                <div class="empresa-card">
                    <div class="imagen-container">
                        {categoria.imagen ? (
                            <img
                                src={categoria.imagen}
                                alt={categoria.nombre}
                                onerror={`console.error('Error cargando imagen para ${categoria.nombre}:', '${categoria.imagen}'); this.style.display='none'; this.parentElement.querySelector('.placeholder').style.display='flex';`}
                                onload={`;`}
                            />
                        ) : null}
                        <div class="placeholder">
                            <svg
                                width="40"
                                height="40"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H19C20.11 23 21 22.11 21 21V9ZM19 9H14V4H5V21H19V9ZM12 8V10L8 14L12 18V16L16 12L12 8Z"
                                    fill="#059669"
                                />
                            </svg>
                        </div>
                    </div>
                    <div class="card-content">
                        <span class="badge-categoria">{categoria.nombre}</span>
                        <h3>Servicios disponibles</h3>
                        <p class="descripcion">
                            Encuentra {categoria.empresasCount}{" "}
                            {categoria.empresasCount === 1
                                ? "servicio"
                                : "servicios"}{" "}
                            de {categoria.nombre.toLowerCase()} disponibles.
                        </p>
                        <div class="acciones">
                            <a
                                href={`/llegar?categoria=${categoria.id}`}
                                class="btn-ver-detalle">
                                Ver servicios
                            </a>
                        </div>
                    </div>
                </div>
            ))
        }
    </div>
</section>
