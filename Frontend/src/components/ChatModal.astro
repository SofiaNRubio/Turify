---
// ChatModal.astro - Modal de chat flotante
import "../style/chat-modal.css";
---

<div id="chat-modal" class="chat-modal hidden">
    <div class="chat-modal-content">
        <div class="chat-header">
            <h3>TurifyBot</h3>
            <button id="close-chat" class="close-chat">&times;</button>
        </div>
        <div class="messages" id="chat-messages">
            <div class="message assistant">
                <span class="bot-icon">ðŸ¤–</span> Â¡Hola! Soy TurifyBot, tu asistente
                de turismo en San Rafael. Â¿En quÃ© puedo ayudarte?
            </div>
        </div>
        <form id="chat-form" class="chat-input-form">
            <input
                type="text"
                id="chat-user-input"
                placeholder="Escribe tu mensaje..."
                required
            />
            <button type="submit">Enviar</button>
        </form>
    </div>
</div>

<button id="chat-toggle" class="chat-toggle">ðŸ’¬</button>

<script define:vars={{ backendUrl: import.meta.env.PUBLIC_BACKEND_URL }}>
    async function apiFetch(method, endpoint, options = {}) {
        const url = endpoint.startsWith("http")
            ? endpoint
            : `${backendUrl}${endpoint}`;
        return fetch(url, {
            method,
            ...options,
        });
    }

    // Esperar a que el DOM estÃ© completamente cargado
    document.addEventListener("DOMContentLoaded", function () {
        // Variables globales
        let messages = [];
        let typingMessage = null;

        // Elementos DOM
        const chatModal = document.getElementById("chat-modal");
        const chatToggle = document.getElementById("chat-toggle");
        const closeChat = document.getElementById("close-chat");
        const messagesDiv = document.getElementById("chat-messages");
        const chatForm = document.getElementById("chat-form");
        const userInput = document.getElementById("chat-user-input");

        // Verificar que todos los elementos existen
        if (
            !chatModal ||
            !chatToggle ||
            !closeChat ||
            !messagesDiv ||
            !chatForm ||
            !userInput
        ) {
            console.error(
                "ChatModal: No se encontraron todos los elementos necesarios"
            );
            return;
        }

        // ID Ãºnico por sesiÃ³n
        const sessionId =
            localStorage.getItem("chat-session-id") || Date.now().toString();
        localStorage.setItem("chat-session-id", sessionId);

        // Funciones del chat
        function appendMessage(content, role) {
            if (!messagesDiv) return;

            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${role}`;

            // Aplicar estilos inline para asegurar que se vean correctamente
            if (role === "user") {
                messageDiv.style.cssText = `
                    background: linear-gradient(135deg, #2e7d32, #388e3c);
                    color: white;
                    align-self: flex-end;
                    border-bottom-right-radius: 4px;
                    box-shadow: 0 3px 12px rgba(46, 125, 50, 0.3);
                    margin-left: 20%;
                    position: relative;
                    max-width: 75%;
                    padding: 14px 18px;
                    border-radius: 20px;
                    line-height: 1.5;
                    word-wrap: break-word;
                    margin-bottom: 8px;
                    font-size: 14px;
                    animation: messageSlide 0.3s ease;
                `;
            } else if (role === "assistant") {
                messageDiv.style.cssText = `
                    background: linear-gradient(135deg, #e8f5e8, #f1f8e9);
                    color: #1b5e20;
                    align-self: flex-start;
                    border-bottom-left-radius: 4px;
                    border: 2px solid #c8e6c9;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
                    margin-right: 20%;
                    position: relative;
                    font-weight: 500;
                    max-width: 75%;
                    padding: 14px 18px;
                    border-radius: 20px;
                    line-height: 1.5;
                    word-wrap: break-word;
                    margin-bottom: 8px;
                    font-size: 14px;
                    animation: messageSlide 0.3s ease;
                `;
            } else if (role === "error") {
                messageDiv.style.cssText = `
                    background: linear-gradient(135deg, #f44336, #d32f2f);
                    color: white;
                    align-self: flex-start;
                    border-bottom-left-radius: 4px;
                    margin-right: 20%;
                    max-width: 75%;
                    padding: 14px 18px;
                    border-radius: 20px;
                    line-height: 1.5;
                    word-wrap: break-word;
                    margin-bottom: 8px;
                    font-size: 14px;
                `;
            }

            // Convertir Markdown bÃ¡sico a HTML
            const html = content
                .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
                .replace(/\*(.*?)\*/g, "<em>$1</em>")
                .replace(/\n/g, "<br>");

            // Agregar icono para mensajes del asistente
            if (role === "assistant") {
                messageDiv.innerHTML = `<span style="font-size: 16px; margin-right: 6px; opacity: 0.8;">ðŸ¤–</span> ${html}`;
            } else if (role === "user") {
                messageDiv.innerHTML = `${html} <span style="font-size: 12px; opacity: 0.8; margin-left: 6px;">âœ“</span>`;
            } else {
                messageDiv.innerHTML = html;
            }

            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function showTypingIndicator() {
            if (!messagesDiv) return;

            typingMessage = document.createElement("div");
            typingMessage.className = "message assistant typing-indicator";

            // Aplicar estilos inline para el indicador de escritura
            typingMessage.style.cssText = `
                background: linear-gradient(135deg, #e8f5e8, #f1f8e9);
                color: #81c784;
                align-self: flex-start;
                border-bottom-left-radius: 4px;
                border: 2px solid #c8e6c9;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
                margin-right: 20%;
                position: relative;
                font-weight: 500;
                max-width: 75%;
                padding: 14px 18px;
                border-radius: 20px;
                line-height: 1.5;
                word-wrap: break-word;
                margin-bottom: 8px;
                font-size: 14px;
                font-style: italic;
                opacity: 0.7;
                animation: pulse 1.5s infinite;
            `;

            typingMessage.innerHTML =
                '<span style="font-size: 16px; margin-right: 6px; opacity: 0.8;">ðŸ¤–</span> TurifyBot estÃ¡ escribiendo...';
            messagesDiv.appendChild(typingMessage);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function hideTypingIndicator() {
            if (typingMessage && messagesDiv) {
                messagesDiv.removeChild(typingMessage);
                typingMessage = null;
            }
        }

        // Event listeners
        chatToggle.addEventListener("click", function (e) {
            e.preventDefault();
            e.stopPropagation();
            chatModal.classList.remove("hidden");
            userInput.focus();
        });

        closeChat.addEventListener("click", function (e) {
            e.preventDefault();
            e.stopPropagation();
            chatModal.classList.add("hidden");
        });

        // Cerrar modal al hacer clic fuera
        chatModal.addEventListener("click", function (e) {
            if (e.target === chatModal) {
                chatModal.classList.add("hidden");
            }
        });

        chatForm.addEventListener("submit", async function (e) {
            e.preventDefault();
            if (!userInput) return;

            const userMessage = userInput.value.trim();
            if (!userMessage) return;

            // Mostrar mensaje del usuario
            appendMessage(userMessage, "user");
            messages.push({ role: "user", content: userMessage });
            userInput.value = "";

            showTypingIndicator();

            try {
                const response = await apiFetch("POST", "/chat", {
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        message: userMessage,
                    }),
                });

                const data = await response.json();
                hideTypingIndicator();

                if (data.response) {
                    appendMessage(data.response, "assistant");
                    messages.push({
                        role: "assistant",
                        content: data.response,
                    });
                }
            } catch (error) {
                console.error("ChatModal: Error:", error);
                hideTypingIndicator();
                appendMessage(
                    "Lo siento, hubo un error al procesar tu mensaje.",
                    "error"
                );
            }
        });
    });
</script>
