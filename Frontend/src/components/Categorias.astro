---
import { apiFetch } from "../utils/api";
import "../style/categorias-component.css";

// Definir tipos TypeScript
interface Empresa {
    id: string;
    nombre: string;
    descripcion: string | null;
    email: string | null;
    telefono: string | null;
    sitio_web: string | null;
    direccion: string;
    latitud: number | null;
    longitud: number | null;
    img_url: string | null;
    categoria_id: string | null;
    created_at: string;
}

interface Categoria {
    id: string;
    nombre: string;
}

interface CategoriaConImagen {
    id: string;
    nombre: string;
    imagen: string | null;
    empresasCount: number;
}

// Función para obtener las categorías desde el backend
async function obtenerCategorias(): Promise<Categoria[]> {
    try {
        const response = await apiFetch("/categorias");
        if (!response.ok) {
            throw new Error("Error al obtener categorías");
        }
        return await response.json();
    } catch (error) {
        console.error("Error al obtener categorías:", error);
        return [];
    }
}

// Función para obtener las empresas desde el backend
async function obtenerEmpresas(): Promise<Empresa[]> {
    try {
        const response = await apiFetch("/empresas");
        if (!response.ok) {
            throw new Error("Error al obtener empresas");
        }
        return await response.json();
    } catch (error) {
        console.error("Error al obtener empresas:", error);
        return [];
    }
}

// Obtener datos
const [categorias, empresas] = await Promise.all([
    obtenerCategorias(),
    obtenerEmpresas(),
]);

// Filtrar categorías de emergencia
const categoriasExcluidas = [
    "hospitales",
    "policía",
    "bomberos",
    "farmacias",
    "llegar",
    "moverte",
    "aerolineas",
    "renta_vehiculos",
    "taxis",
    "terminal_omnibus",
];

const categoriasFiltradas = categorias.filter(
    (categoria) =>
        !categoriasExcluidas.some((excluida) =>
            categoria.nombre.toLowerCase().includes(excluida)
        )
);

// Crear array de categorías con sus imágenes y conteo de empresas
const categoriasConImagen: CategoriaConImagen[] = categoriasFiltradas
    .map((categoria) => {
        // Buscar empresas de esta categoría
        const empresasDeCategoria = empresas.filter(
            (empresa) => empresa.categoria_id === categoria.id
        );
        // Buscar la primera empresa con imagen de esta categoría
        const empresaConImagen = empresasDeCategoria.find((empresa) => {
            const tieneImagen =
                empresa.img_url &&
                empresa.img_url.trim() !== "" &&
                empresa.img_url !== "null" &&
                empresa.img_url !== "undefined";

            return tieneImagen;
        });

        // Usar imagen de empresa o null si no hay
        const imagen = empresaConImagen?.img_url || null;

        return {
            id: categoria.id,
            nombre: categoria.nombre,
            imagen: imagen,
            empresasCount: empresasDeCategoria.length,
        };
    })
    .filter((categoria) => categoria.empresasCount > 0); // Solo mostrar categorías que tienen empresas
---

<section
    class="cat-actividades-empresas"
    role="region"
    aria-labelledby="titulo-categorias">
    <h2 id="titulo-categorias">Explora lo mejor de San Rafael</h2>
    <div
        class="cat-grid-actividades"
        role="grid"
        aria-label="Categorías de atractivos turísticos">
        {
            categoriasConImagen.map(
                (categoria: CategoriaConImagen, index: number) => (
                    <div
                        class="cat-card-actividad"
                        role="gridcell"
                        tabindex="0"
                        aria-label={`${categoria.nombre}, ${categoria.empresasCount} ${categoria.empresasCount === 1 ? "empresa" : "empresas"}`}>
                        {categoria.imagen ? (
                            <img
                                src={categoria.imagen}
                                alt={`Imagen representativa de ${categoria.nombre}`}
                                loading="lazy"
                                onerror={`console.error('Error cargando imagen para ${categoria.nombre}:', '${categoria.imagen}'); this.style.display='none'; this.parentElement.querySelector('.cat-placeholder-imagen').style.display='flex';`}
                                onload={`;`}
                            />
                        ) : null}
                        <div
                            class="cat-placeholder-imagen"
                            style={
                                categoria.imagen
                                    ? "display: none;"
                                    : "display: flex;"
                            }
                            aria-hidden="true">
                            <svg
                                width="60"
                                height="60"
                                viewBox="0 0 60 60"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true">
                                <rect
                                    width="60"
                                    height="60"
                                    rx="12"
                                    fill="#e0e0e0"
                                />
                                <path
                                    d="M15 45L22.5 30L37.5 45H15Z"
                                    fill="#bdbdbd"
                                />
                                <circle
                                    cx="22.5"
                                    cy="24"
                                    r="4.5"
                                    fill="#bdbdbd"
                                />
                            </svg>
                            <div style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); font-size: 12px; color: #666;">
                                Sin imagen
                            </div>
                        </div>
                        <div class="cat-card-content">
                            <h3>{categoria.nombre}</h3>
                            <p class="cat-descripcion">
                                Explora {categoria.empresasCount}{" "}
                                {categoria.empresasCount === 1
                                    ? "empresa"
                                    : "empresas"}{" "}
                                en esta categoría.
                            </p>
                            <a
                                href={`/empresas?categoria=${categoria.id}`}
                                class="cat-ver-mas"
                                aria-label={`Ver todas las empresas de ${categoria.nombre}`}
                                tabindex="0">
                                Ver empresas
                            </a>
                        </div>
                    </div>
                )
            )
        }
    </div>
</section>

<script>
    // Script para cambiar aleatoriamente la primera palabra del título
    document.addEventListener("DOMContentLoaded", function () {
        const titulo = document.getElementById("titulo-categorias");
        if (titulo && titulo.textContent) {
            const palabras = ["Explora", "Encuentra"];
            const palabraAleatoria =
                palabras[Math.floor(Math.random() * palabras.length)];

            // Reemplazar solo la primera palabra manteniendo el resto del texto
            titulo.textContent = titulo.textContent.replace(
                /^(Explora|Encuentra)/,
                palabraAleatoria
            );
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Mejorar navegación por teclado en las tarjetas de categorías
        const categoryCards = document.querySelectorAll(".cat-card-actividad");

        categoryCards.forEach((card: Element) => {
            const cardElement = card as HTMLElement;

            // Permitir activación con Enter o Espacio
            cardElement.addEventListener(
                "keydown",
                function (e: KeyboardEvent) {
                    if (e.key === "Enter" || e.key === " ") {
                        e.preventDefault();
                        const link = cardElement.querySelector("a");
                        if (link) {
                            link.click();
                        }
                    }
                }
            );

            // Mejorar el focus visual
            cardElement.addEventListener("focus", function () {
                cardElement.style.outline = "2px solid #007bff";
                cardElement.style.outlineOffset = "2px";
            });

            cardElement.addEventListener("blur", function () {
                cardElement.style.outline = "";
                cardElement.style.outlineOffset = "";
            });
        });
    });
</script>
